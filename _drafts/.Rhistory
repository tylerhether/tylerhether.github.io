return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste(plain(theta2) * phi, "  and  ",plain(cos) * phi)))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste(plain(theta) * phi, "  and  ",plain(cos) * phi)))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression("x-isolcline when ", paste(plain(theta) =30, "  and  K", =30)))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression("x-isolcline when ", paste(plain(theta) =30, "  and  K =30")))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression("x-isolcline when ", paste0(plain(theta), "=30  and  K =30")))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression("x-isolcline when", paste(plain(theta) =30, "  and  ",plain(cos) * phi)))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression("x-isolcline when", plain(theta) =30, "  and  ",plain(cos) * phi))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste(plain(theta) * phi, "  and  ",plain(cos) * phi)))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste(plain(theta)=30, "  and  ",plain(cos) * phi)))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste(plain(theta=30), "  and  ",plain(cos) * phi)))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste(plain(theta), "  and  ",plain(cos) * phi)))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste(plain(theta), "=30  and  ",plain(cos) * phi)))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste(plain(theta), "=30  and  ",plain(K) * phi)))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste(plain(theta), "=10  and  ",plain(K), "=30")))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste("x-isocline when ", plain(theta), "=10  and  ",plain(K), "=30")))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", lty="dotdash", col="red", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste("x-isocline when ", plain(theta), "=10  and  ",plain(K), "=30")))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", lty="dotdash", col="red", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste("x-isocline when ", plain(theta), "=10  and  ",plain(K), "=30")))
abline(v=0, lty="dotdash", col="red")
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), type="l", lty="dotdash", col="red", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste("x-isoclines; ", plain(theta), "=10  and  ",plain(K), "=30")))
abline(v=0, lty="dotdash", col="red")
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), ylab="Work Productivity", xlab="Wellbeing", type="l", lty="dotdash", col="red", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste("x-isoclines; ", plain(theta), "=10  and  ",plain(K), "=30")))
abline(v=0, lty="dotdash", col="red")
abline(v=theta/3, lty="dashed", col="blue")
plot(x=NULL, y=NULL, xlim=c(0, 35), ylim=c(0, 20))
abline(v=theta/3, lty="dashed", col="blue")
abline(h=0, lty="dashed", col="blue")
plot(x=NULL, y=NULL, xlim=c(0, 35), ylim=c(0, 20), ylab="Work Productivity", xlab="Wellbeing")
abline(v=theta/3, lty="dashed", col="blue")
abline(h=0, lty="dashed", col="blue")
plot(x=NULL, y=NULL, xlim=c(0, 35), ylim=c(0, 20), ylab="Work Productivity", xlab="Wellbeing",  main=expression(paste("y-isoclines; ", plain(theta), "=10)))
abline(v=theta/3, lty="dashed", col="blue")
plot(x=NULL, y=NULL, xlim=c(0, 35), ylim=c(0, 20), ylab="Work Productivity", xlab="Wellbeing",  main=expression(paste("y-isoclines; ", plain(theta), "=10")))
abline(v=theta/3, lty="dashed", col="blue")
abline(h=0, lty="dashed", col="blue")
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), ylab="Work Productivity", xlab="Wellbeing", type="l", lty="dotdash", col="red", xlim=c(0, 35), ylim=c(0, 20), main="x-isoclines (red) and y-isoclines (blue)")
abline(v=0, lty="dotdash", col="red")
abline(v=theta/3, lty="dashed", col="blue")
abline(h=0, lty="dashed", col="blue")
fofx
fofx(x=theta/3, k=30, theta=theta)
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), ylab="Work Productivity", xlab="Wellbeing", type="l", lty="dotdash", col="red", xlim=c(0, 35), ylim=c(0, 20), main="x-isoclines (red) and y-isoclines (blue)")
abline(v=0, lty="dotdash", col="red")
abline(v=theta/3, lty="dashed", col="blue")
abline(h=0, lty="dashed", col="blue")
points(x=theta/3, y=fofx(x=theta/3, k=30, theta=theta))
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), ylab="Work Productivity", xlab="Wellbeing", type="l", lty="dotdash", col="red", xlim=c(0, 35), ylim=c(0, 20), main="x-isoclines (red) and y-isoclines (blue)")
abline(v=0, lty="dotdash", col="red")
abline(v=theta/3, lty="dashed", col="blue")
abline(h=0, lty="dashed", col="blue")
points(x=theta/3, y=fofx(x=theta/3, k=30, theta=theta)) # Interior equalibirum
points(x=0,y=0)
points(x=k, y=0)
30*(-2/30)
30*(-2/30)+1
fofx(x=theta/3, k=30, theta=theta)
30*(-1/15)
30*(-1/15) + 1
30/40
(3/4) + .25
(3/4) -
.25
-0.5 + -120
theta=100
30/(theta+30)^2
30/(theta+30)^2 - (1/4)
-1 + (30/(theta+30)^2 - (1/4))
-30*(theta + 30)
30*(-2) + 1
30*(-2) + 1 -.25
-0.5 * - 120
-0.5 + - 120
plot_df <- function(DF, params){
require(ggplot2)
require(dplyr)
x <- seq(from=0, to=max(DF$X*1.5), length.out=200)
y <- ((parms["K"]-x)*(parms["theta"]+x))/(parms["K"])
df2 <- data.frame(x=x, y=y) %>% filter(y>=0, x>=0)
p <- ggplot(data=DF, aes(x= X, y=Y)) +
geom_path(arrow = arrow(type = "open", angle = 30, length = unit(0.1, "inches"))) +
theme_light() +
scale_x_continuous(limits=c(0, max(c(max(1.2*x), max(1.2*DF["X"]))))) +
scale_y_continuous(limits=c(0, max(c(max(1.2*y), max(1.2*DF["Y"])))))
p <- p + geom_path(data=df2, aes(x=x,y=y), colour="red", linetype="dotdash")
p <- p + geom_vline(xintercept = 0, colour="red", linetype="dotdash")
p <- p + geom_vline(xintercept = parms["theta"]/3, colour="blue", linetype='dashed')
p <- p + geom_hline(yintercept = 0, colour="blue", linetype='dashed')
return(p)
}
model <- function(t, y, parms){
with(as.list(c(y, parms)), {
# y[1] is X and y[2] is Y
dX <- y[1] * (1 - (y[1]/K)) - (y[1]*y[2])/(y[1]+theta)
dY <- -0.25*y[2] + (y[1]*y[2])/(y[1]+theta)
list(c(dX, dY))
})
}
parms <- c(K = 3, theta=100)
yini <- c(X = 40, Y=10)
times <- seq(0, 1000, 1)
out <- ode(times=times, y = yini, func = model, parms=parms)
#diagnostics(out)
df <- as.data.frame(out)
plot_df(df)
model <- function(t, y, parms){
with(as.list(c(y, parms)), {
# y[1] is X and y[2] is Y
dX <- y[1] * (1 - (y[1]/K)) - (y[1]*y[2])/(y[1]+theta)
dY <- -0.25*y[2] + (y[1]*y[2])/(y[1]+theta)
list(c(dX, dY))
})
}
parms <- c(K = 30, theta=10)
yini <- c(X = 40, Y=10)
times <- seq(0, 1000, 1)
out <- ode(times=times, y = yini, func = model, parms=parms)
#diagnostics(out)
df <- as.data.frame(out)
plot_df(df)
fofx(x=theta/3, k=30, theta=theta)
theta=10
fofx(x=theta/3, k=30, theta=theta)
a <- function(x, y, theta, K){
return(x * (-(2/K)) - 2*y + 1)
}
b <- function(x, y, theta, K){
return(-x*(theta + x))
}
c <- function(x, y, theta, K){
return((theta * y)/(theta + K)^2)
}
d <- function(x, y, theta, K){
return(((x)/(theta + x)) + 0.25)
}
a(30, 0, 10, 30)
b(30, 0, 10, 30)
c(30, 0, 10, 30)
d(30, 0, 10, 30)
a <- function(x, y, theta, K){
return(x * (-(2/K)) - 2*y + 1)
}
b <- function(x, y, theta, K){
return(-x*(theta + x))
}
c <- function(x, y, theta, K){
return((theta * y)/(theta + K)^2)
}
d <- function(x, y, theta, K){
return(((x)/(theta + x)) - 0.25)
}
trace <- function(a, b, c, d){
return(a+d)
}
det <- function(a, b, c, d){
return((a*d) + (b*c))
}
a <- function(x, y, theta, K){
return(x * (-(2/K)) - 2*y + 1)
}
b <- function(x, y, theta, K){
return(-x*(theta + x))
}
c <- function(x, y, theta, K){
return((theta * y)/(theta + K)^2)
}
d <- function(x, y, theta, K){
return(((x)/(theta + x)) - 0.25)
}
trace <- function(x, y, theta, K){
return(a(x, y, theta, K)+d(x, y, theta, K))
}
det <- function(x, y, theta, K){
return((a(x, y, theta, K)*d(x, y, theta, K)) + (b(x, y, theta, K)*c(x, y, theta, K)))
}
x
x=30
y=0
trace(30,0,10,30)
det(30,0,10,30)
(a(x, y, theta, K)*d(x, y, theta, K))
a
d
x
y
theta
K
K=30
(a(x, y, theta, K)*d(x, y, theta, K))
a(x, y, theta, K)+d(x, y, theta, K)
(b(x, y, theta, K)*c(x, y, theta, K))
a <- function(x, y, theta, K){
return(x * (-(2/K)) - 2*y + 1)
}
b <- function(x, y, theta, K){
return(-x*(theta + x))
}
c <- function(x, y, theta, K){
return((theta * y)/(theta + K)^2)
}
d <- function(x, y, theta, K){
return(((x)/(theta + x)) - 0.25)
}
trace <- function(x, y, theta, K){
return(a(x, y, theta, K)+d(x, y, theta, K))
}
det <- function(x, y, theta, K){
return((a(x, y, theta, K)*d(x, y, theta, K)) + (b(x, y, theta, K)*c(x, y, theta, K)))
}
det(x,y,theta,K)
model <- function(t, y, parms){
with(as.list(c(y, parms)), {
# y[1] is X and y[2] is Y
dX <- y[1] * (1 - (y[1]/K)) - (y[1]*y[2])/(y[1]+theta)
dY <- -0.25*y[2] + (y[1]*y[2])/(y[1]+theta)
list(c(dX, dY))
})
}
parms <- c(K = 30, theta=10)
a <- function(x, y, theta, K){
return(x * (-(2/K)) - 2*y + 1)
}
b <- function(x, y, theta, K){
return(-x*(theta + x))
}
c <- function(x, y, theta, K){
return((theta * y)/(theta + K)^2)
}
d <- function(x, y, theta, K){
return(((x)/(theta + x)) - 0.25)
}
trace <- function(x, y, theta, K){
return(a(x, y, theta, K)+d(x, y, theta, K))
}
det <- function(x, y, theta, K){
return((a(x, y, theta, K)*d(x, y, theta, K)) + (b(x, y, theta, K)*c(x, y, theta, K)))
}
trace(x=10/3, y=11.85185)
trace(x=10/3, y=11.85185, 10, 30)
det(x=10/3, y=11.85185, 10, 30)
# trace
trace(x=theta/3, y=11.85185, theta, K)
# determinate
det(x=theta/3, y=11.85185, theta, K)
# trace
trace(x=theta/3, y=fofx(x=theta/3, k=30, theta=theta), theta, K) # y = 11.85185
# determinate
det(x=theta/3, y=fofx(x=theta/3, k=30, theta=theta), theta, K)
k
K
# trace
trace(x=theta/3, y=fofx(x=theta/3, k=k, theta=theta), theta, k) # y = 11.85185
# determinate
det(x=theta/3, y=fofx(x=theta/3, k=k, theta=theta), theta, k)
# trace
beta <- trace(x=theta/3, y=fofx(x=theta/3, k=k, theta=theta), theta, k) # y = 11.85185
beta
# determinate
gamma <- det(x=theta/3, y=fofx(x=theta/3, k=k, theta=theta), theta, k)
gamma
sqrt((beta)^2 - 4*gamma)
(beta + sqrt((beta)^2 - 4*gamma)) / 2
(beta - sqrt((beta)^2 - 4*gamma)) / 2
beta^2
beta
gamma
c(x,y,theta,k)
c
x
y
x=10/3
y=11.85185
c(x,y,theta,k)
x
y
# trace
beta <- trace(x=theta/3, y=fofx(x=theta/3, k=k, theta=theta), theta, k) # y = 11.85185
beta
# determinate
gamma <- det(x=theta/3, y=fofx(x=theta/3, k=k, theta=theta), theta, k)
gamma
k
K
x
y
theta
b(x,y,theta,k)
c(x,y,theta,k)
b(x,y,theta,k)*c(x,y,theta,k)
a(x,y,theta,k)*d(x,y,theta,k)
a(x,y,theta,k)+d(x,y,theta,k)
a
solve(matrix(c(-1, -1200, 0, 0.5), by.row=TRUE, ncol=2))
solve(matrix(c(-1, -1200, 0, 0.5), byrow=TRUE, ncol=2))
matrix(c(-1, -1200, 0, 0.5), byrow=TRUE, ncol=2)
matrix(c(-1, -1200, 0, 0.5), byrow=TRUE, nrow=2, ncol=2)
matrix(c(-1, -1200, 0, 0.5), nrow=2, ncol=2)
matrix(c(-1, -1200, 0, 0.5), 2, 2)
matrix(c(-1, -1200, 0, 0.5))
matrix(data=c(-1, 0, -1200, 0.5), nrow = 2)
as.matrix(data=c(-1, 0, -1200, 0.5), nrow = 2)
as.matrix(x=c(-1, 0, -1200, 0.5), nrow = 2)
?matrix
matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
matrix(data=c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
matrix(x=c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
example(base::matrix())
matrix(x=c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
as.matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
base::matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
matrix(c(1,2,3,4),2,2)
df <- data.frame(x=c(-1, 0), y=c(-1200, 0.5))
df <- data.frame("x"=c(-1, 0), "y"=c(-1200, 0.5))
matrix(c(1,2,3,4),2,2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plyr)
library(dplyr)
library(deSolve)
x <- seq(from=0, to=200, by=0.01)
y <- 100
theta <- seq(from=10, to=210, by=20)
dat <- expand.grid(x=x, y=y, theta=theta)
dat$response <- apply(dat, 1, function(a){
x = a[1] # explicitly labeled here for readability
y = a[2]
theta = a[3]
return((-x*y)/(x+theta))
})
dat$theta <- as.factor(dat$theta)
ggplot(data=dat, aes(x=x, y=response, group=theta)) +
geom_line(aes(colour=theta)) +
theme_light() +
ylab("Change in wellbeing from the interaction term") +
xlab("Wellbeing (X) when holding Y to 100")
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), ylab="Work Productivity", xlab="Wellbeing", type="l", lty="dotdash", col="red", xlim=c(0, 35), ylim=c(0, 20), main=expression(paste("x-isoclines; ", plain(theta), "=10  and  ",plain(K), "=30")))
abline(v=0, lty="dotdash", col="red")
plot(x=NULL, y=NULL, xlim=c(0, 35), ylim=c(0, 20), ylab="Work Productivity", xlab="Wellbeing",  main=expression(paste("y-isoclines; ", plain(theta), "=10")))
abline(v=theta/3, lty="dashed", col="blue")
abline(h=0, lty="dashed", col="blue")
x <- seq(from=0, to=35, by=0.01)
theta <- 10
k <- 30
fofx <- function(x, k, theta){
return(((k-x)*(theta+x))/k)
}
plot(x, fofx(x=x, k=k, theta=theta), ylab="Work Productivity", xlab="Wellbeing", type="l", lty="dotdash", col="red", xlim=c(0, 35), ylim=c(0, 20), main="x-isoclines (red) and y-isoclines (blue)")
abline(v=0, lty="dotdash", col="red")
abline(v=theta/3, lty="dashed", col="blue")
abline(h=0, lty="dashed", col="blue")
points(x=theta/3, y=fofx(x=theta/3, k=30, theta=theta)) # Interior equalibirum
points(x=0,y=0)
points(x=k, y=0)
a <- function(x, y, theta, K){
return(x * (-(2/K)) - 2*y + 1)
}
b <- function(x, y, theta, K){
return(-x*(theta + x))
}
c <- function(x, y, theta, K){
return((theta * y)/(theta + K)^2)
}
d <- function(x, y, theta, K){
return(((x)/(theta + x)) - 0.25)
}
trace <- function(x, y, theta, K){
return(a(x, y, theta, K)+d(x, y, theta, K))
}
det <- function(x, y, theta, K){
return((a(x, y, theta, K)*d(x, y, theta, K)) + (b(x, y, theta, K)*c(x, y, theta, K)))
}
# trace
beta <- trace(x=theta/3, y=fofx(x=theta/3, k=k, theta=theta), theta, k) # y = 11.85185
beta
# determinate
gamma <- det(x=theta/3, y=fofx(x=theta/3, k=k, theta=theta), theta, k)
gamma
mat <- matrix(c(-1, 0, -1200, 0.5), 2, 2)
mat
det(x=30, y=0, theta=10, K = 30)
